[{"/home/sjmaas/workspace/somethingbluereact/src/index.js":"1","/home/sjmaas/workspace/somethingbluereact/src/components/Blue.js":"2","/home/sjmaas/workspace/somethingbluereact/src/components/ApplicationViews.js":"3","/home/sjmaas/workspace/somethingbluereact/src/components/brides/BrideProvider.js":"4","/home/sjmaas/workspace/somethingbluereact/src/components/auth/Login.js":"5","/home/sjmaas/workspace/somethingbluereact/src/components/auth/Register.js":"6"},{"size":343,"mtime":1607701054765,"results":"7","hashOfConfig":"8"},{"size":1565,"mtime":1607701590548,"results":"9","hashOfConfig":"8"},{"size":369,"mtime":1607702280347,"results":"10","hashOfConfig":"8"},{"size":1563,"mtime":1607702136976,"results":"11","hashOfConfig":"8"},{"size":3025,"mtime":1607701627625,"results":"12","hashOfConfig":"8"},{"size":4501,"mtime":1607701788183,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"4odcr",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/sjmaas/workspace/somethingbluereact/src/index.js",[],["30","31"],"/home/sjmaas/workspace/somethingbluereact/src/components/Blue.js",[],"/home/sjmaas/workspace/somethingbluereact/src/components/ApplicationViews.js",["32"],"import React from \"react\"\nimport {Link, Route} from \"react-router-dom\"\n\nexport const ApplicationViews = (props) => {\n    return (\n        <>\n        <Route path=\"/logout\" render={\n                (props) => {\n                    localStorage.removeItem(\"blue_user\")\n                    props.history.push(\"/login\")\n                }\n            } />\n        </>\n    )\n}","/home/sjmaas/workspace/somethingbluereact/src/components/brides/BrideProvider.js",[],"/home/sjmaas/workspace/somethingbluereact/src/components/auth/Login.js",["33","34","35"],"import React, { useRef, useContext} from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { BrideContext } from \"../brides/BrideProvider\"\nimport \"./Auth.css\"\n\nexport const Login = (props) => {\n    const username = useRef(null)\n    const password = useRef(null)\n    const invalidDialog = useRef(null)\n\n    const {setLoggedIn, getCurrentBride, currentBride } = useContext(BrideContext)\n\n    const handleLogin = (e) => {\n        e.preventDefault();\n\n        return fetch(\"http://localhost:8000/login\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n            },\n            body: JSON.stringify({\n                username: username.current.value,\n                password: password.current.value,\n            })\n        })\n            .then(res => res.json())\n            .then(res => {\n                if (\"valid\" in res && res.valid && \"token\" in res) {\n                    setLoggedIn(true)\n                    localStorage.setItem(\"blue_token\", res.token)\n                    props.history.push(\"/blue\");\n                }\n                else {\n                    invalidDialog.current.showModal();\n                }\n            })\n        }\n\n\n\n    return (\n        <main className=\"container--login\">\n            <dialog className=\"dialog dialog--auth\" ref={invalidDialog}>\n                <div>Username or password was not valid.</div>\n                <button className=\"button--close\" onClick={e => invalidDialog.current.close()}>Close</button>\n            </dialog>\n            <section>\n                <form className=\"form--login\" onSubmit={handleLogin}>\n                    <h1>Something Blue</h1>\n                    <img className=\"login-img\" src=\"https://via.placeholder.com/300x150.png\"></img>\n                    <fieldset>\n                        <input\n                            ref={username}\n                            type=\"text\"\n                            id=\"username\"\n                            className=\"form-control\"\n                            placeholder=\"Username\"\n                            required\n                            autoFocus />\n                    </fieldset>\n                    <fieldset>\n                        <input ref={password}\n                            type=\"password\"\n                            id=\"password\"\n                            className=\"form-control\"\n                            placeholder=\"Password\"\n                            required />\n                    </fieldset>\n                    <fieldset style={{\n                        textAlign:\"center\"\n                    }}>\n                        <button className=\"btn login-button\" type=\"submit\">Login</button>\n                    </fieldset>\n                </form>\n            </section>\n            <section className=\"link--register\">\n                <Link to=\"/register\">Don't have an account yet? Click here to sign up!</Link>\n            </section>\n        </main>\n    )\n}","/home/sjmaas/workspace/somethingbluereact/src/components/auth/Register.js",["36"],"import React, { useRef, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport \"./Auth.css\"\n\nexport const Register = (props) => {\n\n    const [profileImg, setProfileImg] = useState('')\n\n    const first_name = useRef()\n    const last_name = useRef()\n    const email = useRef()\n    const username = useRef()\n    const password = useRef()\n    const verifyPassword = useRef()\n    const passwordDialog = useRef()\n\n    const getBase64 = (file, callback) => {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => callback(reader.result));\n        reader.readAsDataURL(file);\n    }\n\n    const createProfileImageJSON = (event) => {\n        getBase64(event.target.files[0], (base64ImageString) => {\n            setProfileImg(base64ImageString)\n        });\n    }\n\n    const handleRegister = (e) => {\n        e.preventDefault()\n\n        if (password.current.value === verifyPassword.current.value) {\n            const newUser = {\n                \"first_name\": first_name.current.value,\n                \"last_name\": last_name.current.value,\n                \"username\": username.current.value,\n                \"profile_image_url\": profileImg,\n                \"email\": email.current.value,\n                \"password\": password.current.value,\n            }\n            return fetch(\"http://localhost:8000/register\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\"\n                },\n                body: JSON.stringify(newUser)\n            })\n                .then(res => {\n                    return res.json()})\n                .then(res => {\n                        localStorage.setItem(\"blue_token\", res.token)\n                        props.history.push(\"/rare\")\n                })\n        } else {\n            passwordDialog.current.showModal()\n        }\n    }\n\n    return (\n        <main style={{ textAlign: \"center\" }}>\n\n            <dialog className=\"dialog dialog--password\" ref={passwordDialog}>\n                <div>Passwords do not match</div>\n                <button className=\"button--close\" onClick={e => passwordDialog.current.close()}>Close</button>\n            </dialog>\n\n            <form className=\"form--login form--register\" onSubmit={handleRegister}>\n                <h1 className=\"h3 mb-3 font-weight-normal\">Something Blue</h1>\n                <img className=\"register-img\" src=\"https://via.placeholder.com/200x125.png\"></img>\n                <fieldset className=\"register-input\">\n                    <input ref={first_name} type=\"text\" name=\"first_name\" className=\"form-control\" placeholder=\"First Name\" required autoFocus />\n                </fieldset>\n                <fieldset className=\"register-input\">\n                    <input ref={last_name} type=\"text\" name=\"last_name\" className=\"form-control\" placeholder=\"Last Name\" required />\n                </fieldset>\n                <fieldset className=\"register-input\">\n                    <input ref={email} type=\"email\" name=\"email\" className=\"form-control\" placeholder=\"Email\" required />\n                </fieldset>\n                <fieldset className=\"register-input\">\n                    <input ref={username} name=\"username\" className=\"form-control\" placeholder=\"Username\" />\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"profile_image_url\"> Profile Image </label>\n                    <input className=\"register-input\" type=\"file\" id=\"profile_image\" onChange={(evt) => {createProfileImageJSON(evt)}}/>\n                </fieldset>\n                <fieldset>\n                    <label htmlFor=\"inputPassword\"> Password </label>\n                    <input ref={password} type=\"password\" name=\"password\" className=\"form-control\" placeholder=\"Password\" required />\n                </fieldset>\n                <fieldset className=\"register-input\">\n                    <input ref={verifyPassword} type=\"password\" name=\"verifyPassword\" className=\"form-control\" placeholder=\"Verify password\" required />\n                </fieldset>\n                <fieldset style={{\n                    textAlign: \"center\"\n                }}>\n                    <button className=\"btn login-button\" type=\"submit\">Register</button>\n                </fieldset>\n            </form>\n            <section className=\"link--register\">\n                Already registered? <Link to=\"/login\">Login</Link>\n            </section>\n        </main>\n    )\n}",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":2,"column":9,"nodeType":"43","messageId":"44","endLine":2,"endColumn":13},{"ruleId":"41","severity":1,"message":"45","line":11,"column":25,"nodeType":"43","messageId":"44","endLine":11,"endColumn":40},{"ruleId":"41","severity":1,"message":"46","line":11,"column":42,"nodeType":"43","messageId":"44","endLine":11,"endColumn":54},{"ruleId":"47","severity":1,"message":"48","line":51,"column":21,"nodeType":"49","endLine":51,"endColumn":94},{"ruleId":"47","severity":1,"message":"48","line":70,"column":17,"nodeType":"49","endLine":70,"endColumn":93},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'getCurrentBride' is assigned a value but never used.","'currentBride' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]